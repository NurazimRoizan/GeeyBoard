# GeeyBoard
## Unphone 9 (ESP32-S3) NimBLE Keyboard Project

This project implements a custom Bluetooth Low Energy (BLE) Keyboard using the Unphone 9 development board (which features the ESP32-S3 microcontroller) and the highly optimized NimBLE stack. The NimBLE stack is preferred over the traditional Bluedroid stack for its smaller memory footprint and improved performance, making it ideal for resource-constrained devices like the Unphone.

## Getting Started 

These instructions will get you a copy of the project up and running on your local machine for development and testing on the Unphone 9 hardware.

### Prerequisites
You will need the following software installed:

* PlatformIO IDE: Installed as an extension for Visual Studio Code (VSCode).

* Git: The Git command-line tool must be installed on your system and accessible from the PATH, as PlatformIO uses it to download dependencies directly from GitHub repositories.

* Unphone 9 Development Board: The specific ESP32-S3 based hardware this project is designed for.

## üõ†Ô∏è Usage

### Pairing the Device

* Connect your Unphone 9 board to your computer.
* Open the PlatformIO Terminal and monitor the serial output.
* Upload the code to your Unphone 9 board.
* Once the sketch starts, the Unphone 9 will begin advertising as a BLE device.
* On your host machine (PC, phone, tablet), go to the Bluetooth settings and look for the device name configured in your sketch (e.g., "ESP32 NimBLE Keyboard").
* Pair the device.

### Core Features (BLE Keyboard Mode)

The touch interface is configured to support both common character input and essential control keys:
* **BLE HID Emulation:** Presents itself to host devices (Windows, macOS, Android, Linux) as a standard Bluetooth keyboard.
* **Special Keys Implemented in unPhoneUI0.cpp:**

| Touch Symbol | Touch Cluster | Key Code Sent | Function | 
| :---: | :---: | :--- | :--- | 
| `0` | **"Play"** | `KEY_MEDIA_PLAY_PAUSE` | **Play/Pause** | 
| `1` | **"Next"** | `KEY_MEDIA_NEXT_TRACK` | Next | 
| `2` | **"Vol+"** | `KEY_MEDIA_VOLUME_UP` | Volume Up | 
| `3` | **"Close"** | `KEY_LEFT_ALT` + `KEY_F4` | Close Window | 
| `4` | **"Prev"** | `KEY_MEDIA_PREVIOUS_TRACK` | Previous | 
| `5` | **"Vol-"** | `KEY_MEDIA_VOLUME_DOWN` | Volume Down | 
| `6` | **"Utube"** | `print("freetube")` | Freetube | 
| `7` | **"Stremio"** | `print("flatpak run com.stremio.Stremio")` | Strremio | 
| `8` | **"Music"** | `print("freetube")` | Freetube | 
| `9` | **"Ok"** | `KEY_RETURN` | Enter | 
| `10` | **"<<>>"** | `KEY_LEFT_GUI` + `t` | **Windows/Super Key** | 
| `11` | **Mode Switcher** | (Function Call) | Return to Main GUI |

* **IR Transmitter Control:** Capability to send an IR signal (e.g., TV power off command) for remote control functions (requires the IRremoteESP8266 library).

## Setup and Configuration (ESP32 - Unphone Side)

1.  **PlatformIO Setup (`platformio.ini`):**
    Ensure your `platformio.ini` includes dependencies for the libraries used. Key libraries directly used or complete dependencies for unphone 9 can be downloaded [here](https://gitlab.com/hamishcunningham/unphone/-/raw/master/libraries9.zip):
    * `Adafruit GFX Library` (likely a dependency of `Adafruit_HX8357`)
    * `Adafruit HX8357 Library`
    * `XPT2046_Touchscreen`
    * `Adafruit LSM6DS Library` (for LSM6DS3TRC)
    * `IRremoteESP8266` (part of the original template)
    * `HTTPClient` (built-in with ESP32 core)
    * `WiFi` (built-in)

    Your `unPhone.h`, `unPhone.cpp`, `unPhoneUI0.h`, and `unPhoneUI0.cpp` files should be placed in your project's `.pio\libdeps\unphone9` directory so PlatformIO can compile and link.

2. **BLE Device Configuration**

The device name visible to host machines (like your PC or phone) is set during the initialization of the bleKeyboard object. You can change the device name and manufacturer in unPhoneUI0.cpp.

3. **IR Control Configuration**

To use the IR Transmitter Control feature, you must configure the TV power code:

Define IR Code: In ProjectThing.ino, define the IR protocol, address, and command that matches your target device (e.g., a TV, stereo, or projector). Default is the square button. (I am using Panasonic64 protocol).

Verify IR Pin: Ensure the ESP32 pin connected to the IR LED is correctly initialized for transmission.

## Troubleshooting/Notes

* **Serial Monitor:** Use the Arduino Serial Monitor extensively for debugging. Check for Wi-Fi connection status, IMU readings, flick detection messages, HTTP request attempts, and response codes.
* **Library dependencies issue** If for some reason you keep getting build errors on dependencies (especially AsyncWebServer). Try:
  * Clear all download dependencies `rm -rf .pio/libdeps/unphone9/*`
  * Unzip ‚Äúlibraries9.zip‚Äù into libdeps `unzip libraries9.zip -d .pio/libdeps/unphone9` (Make sure to skip the unPhoneLibrary folder as this project derived some bit and pieces for the functionality)
  * Then upon compiling again it re-downloaded any missing dependencies and the error went away


## Acknowledgements

* The core Unphone class structure, including the GFX-based UI framework (`UIController`, `MenuUIElement`, etc. in `unPhoneUI0.cpp` and `unPhoneUI0.h`), is derived from or inspired by the examples and library provided by Hamish Cunningham for the unPhone project, available at
 [unphoneLibrary](https://gitlab.com/hamishcunningham/unphonelibrary).

* NimBle open-source bluetooth stack library by [wakwak-koba](https://github.com/wakwak-koba/ESP32-NimBLE-Keyboard) which forked the original [ESP32 NimBLE Keyboard Library by T-vk](https://github.com/T-vK/ESP32-BLE-Keyboard).

* The Switching TV off feature is inspired by a git repository available at [crankyoldgit](https://github.com/crankyoldgit/IRremoteESP8266) 

## Contributing

This project is based on the work of the open-source community. If you find issues or have suggestions for the code, please feel free to fork the repository and submit a pull request.
