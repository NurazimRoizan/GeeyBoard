# GeeyBoard
## Unphone 9 (ESP32-S3) NimBLE Keyboard Project

This project implements a custom Bluetooth Low Energy (BLE) Keyboard using the Unphone 9 development board (which features the ESP32-S3 microcontroller) and the highly optimized NimBLE stack. The NimBLE stack is preferred over the traditional Bluedroid stack for its smaller memory footprint and improved performance, making it ideal for resource-constrained devices like the Unphone.

## ü§ù Contributing

This project is based on the work of the open-source community. If you find issues or have suggestions for the code, please feel free to fork the repository and submit a pull request.


## Getting Started 

These instructions will get you a copy of the project up and running on your local machine for development and testing on the Unphone 9 hardware.

### Prerequisites
You will need the following software installed:

* PlatformIO IDE: Installed as an extension for Visual Studio Code (VSCode).

* Git: The Git command-line tool must be installed on your system and accessible from the PATH, as PlatformIO uses it to download dependencies directly from GitHub repositories.

* Unphone 9 Development Board: The specific ESP32-S3 based hardware this project is designed for.

## üõ†Ô∏è Usage

### 1. Pairing the Device

* Connect your Unphone 9 board to your computer.
* Open the PlatformIO Terminal and monitor the serial output.
* Upload the code to your Unphone 9 board.
* Once the sketch starts, the Unphone 9 will begin advertising as a BLE device.
* On your host machine (PC, phone, tablet), go to the Bluetooth settings and look for the device name configured in your sketch (e.g., "ESP32 NimBLE Keyboard").
* Pair the device.

### 2. Sending Keystrokes

In your main main.cpp or .ino file, you can control the keyboard using the BleKeyboard object, typically initialized like this:
`#include <BleKeyboard.h>

BleKeyboard bleKeyboard;

void setup() {
  Serial.begin(115200);
  Serial.println("Starting BLE keyboard...");
  bleKeyboard.begin();
}

void loop() {
  if(bleKeyboard.isConnected()) {
    // Send the text "Hello World" followed by the Enter key
    bleKeyboard.print("Hello World!"); 
    bleKeyboard.write(KEY_RETURN);
    delay(5000); // Wait 5 seconds before repeating
  }
}`.

For more complex key combinations (like Ctrl+C or media keys), consult the ESP32-NimBLE-Keyboard examples.

## Setup and Configuration (ESP32 - Unphone Side)

1.  **Wi-Fi Credentials:** Configure your Wi-Fi SSID and password. This is done in a `private.h` file (which should be in the same directory as `sketch.ino`).
    Example `private.h` content:
    ```c++
    #define _MULTI_SSID1 "Your_WiFi_SSID"
    #define _MULTI_KEY1  "Your_WiFi_Password"
    // other wifi connections
    ```
2.  **Game Server IP Address and Port:** In `sketch.ino` (or a configuration file), set:
    * `const char* host = "YOUR_COMPUTER_LAN_IP";` (e.g., "192.168.1.100")
    * `const int port = 3000;` (or the port the game websocket server's HTTP `/jump` endpoint is listening on default on 3000)
3.  **Flick Detection Thresholds:** In `sketch.ino`, adjust these constants based on testing:
    * `FLICK_GYRO_X_THRESHOLD` (e.g., -2.5 rad/s)
    * `FLICK_ACCEL_Y_THRESHOLD` (e.g., 6.0 m/s¬≤)
    * `FLICK_COOLDOWN_MS` (e.g., 1000 milliseconds)
4.  **PlatformIO Setup (`platformio.ini`):**
    Ensure your `platformio.ini` includes dependencies for the libraries used. Key libraries directly used or complete dependencies for unphone 9 can be downloaded [here](https://gitlab.com/hamishcunningham/unphone/-/raw/master/libraries9.zip):
    * `Adafruit GFX Library` (likely a dependency of `Adafruit_HX8357`)
    * `Adafruit HX8357 Library`
    * `XPT2046_Touchscreen`
    * `Adafruit LSM6DS Library` (for LSM6DS3TRC)
    * `IRremoteESP8266` (part of the original template)
    * `HTTPClient` (built-in with ESP32 core)
    * `WiFi` (built-in)

    Your `unPhone.h`, `unPhone.cpp`, `unPhoneUI0.h`, and `unPhoneUI0.cpp` files should be placed in your project's `.pio\libdeps\unphone9` directory so PlatformIO can compile and link.

## Game Server Side

### NVM (Node Version Manager) Installation

#### Windows

1. **Download the Installer**  
   Visit the [nvm-windows releases page](https://github.com/coreybutler/nvm-windows/releases) and download the latest `nvm-setup.zip`.

2. **Run the Installer**  
   Extract the archive and run `nvm-setup.exe`. Follow the installation wizard to complete the setup.

3. **Verify Installation**  
   Open a new Command Prompt or PowerShell window and run:

   ```bash
   nvm version
   ```
#### macOS / Linux

1. **Install NVM**
   Open a terminal and run:

   ```bash
   curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash
   ```

2. **Activate NVM**
   Add the following lines to your shell profile (`~/.bashrc`, `~/.zshrc`, or similar):

   ```bash
   export NVM_DIR="$HOME/.nvm"
   [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
   ```

   Then reload your terminal or run the above commands manually to activate NVM.

## Node.js Installation

Once NVM is installed, install and use Node.js:

```bash
nvm install 18
nvm use 18
nvm alias default 18
```

## Setting Up the WebSocket Server

1. Navigate to the server directory:

   ```bash
   cd jump-server
   ```

2. Start the WebSocket server:
    ```bash
   node server.js
   ```

   Make sure port `3000` is available and not blocked by a firewall.


* The game runs on a PC, served locally (e.g., by VS Code Live Server on port 5500 and WebSocket server on 3000).
* This server environment must be configured to **listen for HTTP GET requests on the `/jump` path** (or whatever path you configure in the Unphone sketch).
* Upon receiving this `GET /jump` request, the server-side logic (or the game itself, if it can directly interpret server logs or has a backend) needs to trigger the "jump" action in the game.

## How to Use

1.  **Configure:** Set up your Wi-Fi credentials, and the `host` IP address and `port` for your game server in the Unphone sketch.
2.  **Tune:** Adjust flick detection thresholds by observing sensor data during test flicks.
3.  **Upload:** Compile and upload the sketch to your Unphone device using PlatformIO or Arduino IDE.
4.  **Run Game Server:** Start your game and its associated server on your computer. Ensure it's accessible on your local network at the IP and port configured in the Unphone sketch.
5.  **Play:**
    * Perform the "flick up" gesture with the Unphone.
    * Alternatively, navigate to the "DinoGame Controller" screen on the Unphone and tap the "JUMP" button area.
    * The Unphone should send an HTTP GET request to your game server, triggering the jump action.

## Troubleshooting/Notes

* **Serial Monitor:** Use the Arduino Serial Monitor extensively for debugging. Check for Wi-Fi connection status, IMU readings, flick detection messages, HTTP request attempts, and response codes.
* **Flick Thresholds:** Find the right thresholds for personal comfort (or use the button1).
* **Server IP Address:** Ensure the `host` IP address in the Unphone sketch is the correct current **Local Area Network (LAN)** IP address of the computer running the game server.
* **Server Port and Path:** Double-check that the port and the path (e.g., `/jump`) match exactly what your game server is expecting for the HTTP GET request.
* **Firewall:** Ensure your computer's firewall is not blocking incoming connections to the game server port from other devices on your local network (like the Unphone).
* **HTTP vs. WebSocket:** This project currently uses the Unphone as an HTTP client to send the jump command. The game is hosted on http server and listening to WebSocket server on another port. Unphone should request GET command in the websocket port instead.
* **Library dependencies issue** If for some reason you keep getting build errors on dependencies (especially AsyncWebServer). Try:
  * Clear all download dependencies `rm -rf .pio/libdeps/unphone9/*`
  * Unzip ‚Äúlibraries9.zip‚Äù into libdeps `unzip libraries9.zip -d .pio/libdeps/unphone9` (Make sure to skip the unPhoneLibrary folder as this project derived some bit and pieces for the functionality)
  * Then upon compiling again it re-downloaded any missing dependencies and the error went away

## Gambar Sini (GUI ke apa2 ke) 

![MenuUI](MenuUI.jpeg)
![DinoGameUI](DinoGameUI.jpeg)


## Link video demonstration
[Unphone demo](https://www.youtube.com/watch?v=Qqbvo6nxM9w)

## Acknowledgements

* The core Unphone class structure, including the GFX-based UI framework (`UIController`, `MenuUIElement`, etc. in `unPhoneUI0.cpp` and `unPhoneUI0.h`), is derived from or inspired by the examples and library provided by Hamish Cunningham for the unPhone project, available at
 [unphoneLibrary](https://gitlab.com/hamishcunningham/unphonelibrary).

* The game mechanic, design, art sprites is derived from or inspired by a git repository available at 
[CodingWith-Adam](https://github.com/CodingWith-Adam/dino-game.git) 

* The Switching TV off feature is inspired by a git repository available at [crankyoldgit](https://github.com/crankyoldgit/IRremoteESP8266) 

## Self Assessment

* You can find the [Project Self-Assessment Notes here](SELF_ASSESSMENT.txt).

